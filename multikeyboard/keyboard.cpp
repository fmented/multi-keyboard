#include <HID.h>
#include "keyboard.h"
#include "keytab.h"

uint16_t caps[]{
  //ESC - RCTRL
 0x11B  ,0x161  ,0x162  ,0x163  ,0x164  ,0x165  ,0x166  ,0x167  ,0x168  ,0x169  ,0x16A  ,0x16B  ,0x16C  
,0x40 ,0x31 ,0x32 ,0x33 ,0x34 ,0x35 ,0x36 ,0x37 ,0x38 ,0x39 ,0x30 ,0x3C ,0x5F ,0x11C
,0x11D  ,0x51 ,0x57 ,0x45 ,0x52 ,0x54 ,0x59 ,0x55 ,0x49 ,0x4F ,0x50 ,0x5D ,0x5E ,0x5C
,0x103  ,0x41 ,0x53 ,0x44 ,0x46 ,0x47 ,0x48 ,0x4A ,0x4B ,0x4C ,0x5B ,0x3A ,0x11E  
,0x106  ,0x5A ,0x58 ,0x43 ,0x56 ,0x42 ,0x4E ,0x4D ,0x3B ,0x3D ,0x3E ,0x107    
,0x108  ,0x10C  ,0x10A  ,0x11F  ,0x10B  ,0x10D  ,0x10E  ,0x109            

//PRINTSCR - RARROW
,0x104  ,0x102  ,0x06 ,0x119  ,0x111  ,0x113  ,0x11A  ,0x112  ,0x114  ,0x117  ,0x115  ,0x118  ,0x116  

//NUMLOCK - KPENTER
,0x101  ,0x2F ,0x2E ,0x2D ,0x27 ,0x28 ,0x29 ,0x2C ,0x24 ,0x25 ,0x26 ,0x21 ,0x22 
,0x23 ,0x2B ,0x20 ,0x2A                   

//0x111 ,0x112 ,0x113 ,0x114 ,0x115 ,0x116 ,0x117 ,0x118 
//,0x119 ,0x11A ,0x11B ,0x11C ,0x11D ,0x11E ,0x11F ,0x020 
//,0x021 ,0x022 ,0x023 ,0x024 ,0x025 ,0x026 ,0x027 ,0x028 
//,0x029 ,0x02A ,0x02B ,0x02C ,0x02D ,0x02E ,0x02F ,0x030 
//,0x031 ,0x032 ,0x033 ,0x034 ,0x035 ,0x036 ,0x037 ,0x038 
//,0x039 ,0x03A ,0x03B ,0x03C ,0x03D ,0x03E ,0x040 ,0x041  
//,0x042 ,0x043 ,0x044 ,0x045 ,0x046 ,0x047 ,0x048 ,0x049 
//,0x04A ,0x04B ,0x04C ,0x04D ,0x04E ,0x04F ,0x050 ,0x051 
//,0x052 ,0x053 ,0x054 ,0x055 ,0x056 ,0x057 ,0x058 ,0x059
//,0x05A ,0x05B ,0x05C ,0x05D ,0x05E ,0x05F ,0x161 ,0x162 
//,0x163 ,0x164 ,0x165 ,0x166 ,0x167 ,0x168 ,0x169 ,0x16A 
//,0x16B ,0x16C ,0x104 ,0x10E ,0x101 ,0x102
//,0x4106 ,0x4107 ,0x2108 ,0x2109 ,0x30C 
//,0x90A ,0x50B ,0x30D
//release mod
//,0x8106 ,0x8107 ,0x8108 , 0x8109, 0x810A, 0x810B, 0x810C
//,0x810D, 0x810E
};

static const uint8_t hidReportDescriptor[] PROGMEM = {

  //  Keyboard
    0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)  // 47
    0x09, 0x06,                    // USAGE (Keyboard)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x85, 0x02,                    //   REPORT_ID (2)
    0x05, 0x07,                    //   USAGE_PAGE (Keyboard)
   
  0x19, 0xe0,                    //   USAGE_MINIMUM (Keyboard LeftControl)
    0x29, 0xe7,                    //   USAGE_MAXIMUM (Keyboard Right GUI)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x25, 0x01,                    //   LOGICAL_MAXIMUM (1)
    0x75, 0x01,                    //   REPORT_SIZE (1)
    
  0x95, 0x08,                    //   REPORT_COUNT (8)
    0x81, 0x02,                    //   INPUT (Data,Var,Abs)
    0x95, 0x01,                    //   REPORT_COUNT (1)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x81, 0x03,                    //   INPUT (Cnst,Var,Abs)
    
  0x95, 0x06,                    //   REPORT_COUNT (6)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x25, 0x65,                    //   LOGICAL_MAXIMUM (101)
    0x05, 0x07,                    //   USAGE_PAGE (Keyboard)
    
  0x19, 0x00,                    //   USAGE_MINIMUM (Reserved (no event indicated))
    0x29, 0x65,                    //   USAGE_MAXIMUM (Keyboard Application)
    0x81, 0x00,                    //   INPUT (Data,Ary,Abs)
    0xc0,                          // END_COLLECTION
};

void initKeyboard() {
  static HIDSubDescriptor node(hidReportDescriptor, sizeof(hidReportDescriptor));
  HID().AppendDescriptor(&node);
}

uint8_t keyReport[8]{
};

void sendKey(){

	HID().SendReport(2,keyReport,8);
}

void releaseKey(){
	keyReport[2] = 0;
	keyReport[3] = 0;
	keyReport[4] = 0;
	keyReport[5] = 0;
	keyReport[6] = 0;
	keyReport[7] = 0;
	sendKey();
}
void releaseAllKey(){
	keyReport[0] = 0;
	keyReport[2] = 0;
	keyReport[3] = 0;
	keyReport[4] = 0;
	keyReport[5] = 0;
	keyReport[6] = 0;
	keyReport[7] = 0;
	sendKey();
}

void pressKey(uint8_t k1){
	keyReport[2] = k1;
	sendKey();
	releaseKey();
	
}

void pressMod(uint8_t mod){
  keyReport[0] = mod;
  sendKey();
  
}

void macroKey(uint8_t mod, uint8_t k1,uint8_t k2=0,uint8_t k3=0,uint8_t k4=0,uint8_t k5=0,uint8_t k6=0){
  keyReport[0] = mod;
  keyReport[2] = k1;
  keyReport[3] = k2;
  keyReport[4] = k3;
  keyReport[5] = k4;
  keyReport[6] = k5;
  keyReport[7] = k6;
  sendKey();
  releaseAllKey();
}
